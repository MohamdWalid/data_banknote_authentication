# -*- coding: utf-8 -*-
"""support_vector_machine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11oxFOQU70iYGi3-Jn1HemHhQ5WpzRzNv

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import roc_curve , auc
from sklearn.metrics import confusion_matrix, accuracy_score

"""## Importing the dataset"""

dataset = pd.read_csv(r'/content/data_banknote_authentication.txt')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

print(X_train)

print(y_train)

print(X_test)

print(y_test)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

print(X_test)

"""## Training the SVM model on the Training set

Soft Margin
"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', C=1)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print(y_pred)

cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

TPR = (cm[0][0] / (cm[0][0]+cm[1][0])) *100
print(TPR)
FPR = (cm[0][1] / (cm[0][1]+cm[1][1])) *100
print(FPR)

svm1_fpr , svm1_tpr , threshold = roc_curve(y_test,y_pred)
auc_svm1 = auc(svm1_fpr,svm1_tpr)

"""hard Margin"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', C=200)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print(y_pred)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

TPR = (cm[0][0] / (cm[0][0]+cm[1][0])) *100
print(TPR)
FPR = (cm[0][1] / (cm[0][1]+cm[1][1])) *100
print(FPR)

svm2_fpr , svm2_tpr , threshold = roc_curve(y_test,y_pred)
auc_svm2 = auc(svm2_fpr,svm2_tpr)

plt.figure(figsize=(5,5),dpi=100)
plt.plot(svm2_fpr,svm2_tpr,label='svm2 (auc= %0.3f)'% auc_svm2)
plt.plot(svm1_fpr,svm1_tpr,label='svm1 (auc= %0.3f)'% auc_svm1)

plt.xlabel('False Positive Rate')
plt.xlabel('True Positive Rate')
plt.legend()
plt.show()